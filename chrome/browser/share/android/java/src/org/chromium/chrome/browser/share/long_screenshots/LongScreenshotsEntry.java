// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.chrome.browser.share.long_screenshots;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Rect;

import org.chromium.chrome.browser.tab.Tab;
import org.chromium.components.paint_preview.common.proto.PaintPreview.PaintPreviewProto;
import org.chromium.components.paintpreview.player.CompositorStatus;
import org.chromium.content_public.browser.RenderCoordinates;
import org.chromium.url.GURL;

/**
 * Manages the lifecycle of generating one bitmap in the long screenshot. Takes in the bounds of the
 * desired screenshot. 1. Requests a capture of the webpage for the bounds specified through
 * {@link LongScreenshotsTabService}. 2. Composites the captured webpage through
 * {@LongScreenshotsCompositor} 3. Returns the generated bitmap via provided
 * {@link LongScreenshotsEntry.Listener}
 */
public class LongScreenshotsEntry implements LongScreenshotsTabService.CaptureProcessor {
    private Context mContext;
    private int mStartXAxis;
    private int mStartYAxis;
    private int mEndXAxis;
    private int mEndYAxis;
    // Response with a pointer to the skia image
    private PaintPreviewProto mProtoResponse;

    // Compositor delegate responsible for compositing the skia image.
    private LongScreenshotsCompositor mCompositor;

    private LongScreenshotsTabService mLongScreenshotsTabService;
    private Tab mTab;

    private static final String DIR_NAME = "long_screenshots_dir";

    // Generated bitmap
    private Bitmap mGeneratedBitmap;

    private Listener mEventListener;

    /**
     * Users of the {@link LongScreenshotsEntry} class have to implement and pass this interface in
     * the constructor.
     */
    public interface Listener {
        /**
         * Called when the compositor cannot be successfully initialized.
         */
        void onCompositorError(@CompositorStatus int status);

        /**
         * Called when the bitmap has been succesfully generated.
         */
        void onBitmapGenerated(LongScreenshotsEntry entry);

        /**
         * Called when the capture failed.
         */
        void onCaptureError();
    }

    /**
     * @param context An instance of current Android {@link Context}.
     * @param tab The tab to capture the results for.
     * @param listener The listener to be notified with the generated bitmap.
     */
    public LongScreenshotsEntry(Context context, Tab tab, Listener listener) {
        mContext = context;
        mTab = tab;
        mEventListener = listener;

        mLongScreenshotsTabService = LongScreenshotsTabServiceFactory.getServiceInstance();
        mLongScreenshotsTabService.setCaptureProcessor(this);
    }

    /**
     * Defines the bounds of the capture and compositing. Only the starting height and the height of
     * the clip is needed. The entire width is always captured.
     *
     * @param startYAxis Where on the scrolled page the capture and compisiting should start.
     * @param clipHeight The length of the webpage that should be captured.
     */
    public void setClipBounds(int startYAxis, int clipHeight) {
        RenderCoordinates coords = RenderCoordinates.fromWebContents(mTab.getWebContents());

        mStartYAxis = startYAxis;
        mEndYAxis = (int) Math.floor(mStartYAxis + (clipHeight * coords.getPageScaleFactor()));
        mStartXAxis = 0;
        mEndXAxis = (int) Math.floor(coords.getContentWidthPixInt() / coords.getPageScaleFactor());
    }

    /**
     * Starts the capture of the screenshot.
     */
    public void captureScreenshot() {
        // TODO(tgupta): Consider throwing an error here if the clip bounds have not been
        // provided.
        Rect rect = new Rect(mStartXAxis, mStartYAxis, mEndXAxis, mEndYAxis);
        mLongScreenshotsTabService.captureTab(mTab, rect);
    }

    /**
     * Called from native after the tab has been captured.
     *
     * @param response Response generated by the capturer with the filepath to the skia image.
     * @param status Status with the state of the capture.
     */
    @Override
    public void processCapturedTab(PaintPreviewProto response, int status) {
        // TODO(tgupta): Process a non success status
        mCompositor = new LongScreenshotsCompositor(new GURL(response.getMetadata().getUrl()),
                mLongScreenshotsTabService, DIR_NAME, response,
                new Rect(mStartXAxis, mStartYAxis, mEndXAxis, mEndYAxis), this::onBitmapResult);
    }

    /**
     * Called after the bitmap has been composited and can be shown to the user.
     *
     * @param result Bitmap to display in the dialog.
     */
    private void onBitmapResult(Bitmap result) {
        mGeneratedBitmap = result;
        mEventListener.onBitmapGenerated(this);
    }

    /**
     * @return the generated bitmap or null in the case of error or incomplete generation. Callers
     *         should only call this function after listening for onBitmapGenerated.
     */
    public Bitmap getBitmap() {
        return mGeneratedBitmap;
    }

    public void destroy() {
        if (mCompositor != null) {
            mCompositor.destroy();
            mCompositor = null;
        }
        mGeneratedBitmap = null;
    }
}
